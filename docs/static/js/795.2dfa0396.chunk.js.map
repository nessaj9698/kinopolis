{"version":3,"file":"static/js/795.2dfa0396.chunk.js","mappings":"wIACA,QAA2B,2BAA3B,EAAwE,kCAAxE,EAA0H,gC,aCenH,MAAMA,EAAWC,IAMV,IANW,MACvBC,EAAK,WACLC,EAAU,gBACVC,EAAe,cACfC,EAAa,MACbC,GACML,EACN,MAAM,aACJM,EAAY,QACZC,EAAO,QACPC,EACAC,WAAW,OAAEC,KACXC,EAAAA,EAAAA,MAEEC,EAAgBC,gBACdL,EAAQM,EAAU,EAO1B,OACEC,EAAAA,EAAAA,MAAA,QAAMC,SAAUV,GAL+BW,IAC/Cd,EAAgBc,EAAK,IAImBC,YAAU,EAACC,UAAWC,EAAWC,SAAA,EACvEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKpB,KACLc,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOC,QAAQ,QAAOF,SAAC,YACvBC,EAAAA,EAAAA,KAACE,EAAAA,GAAU,CACTC,KAAK,QACLlB,QAASA,EACTmB,aAAa,GACbC,MAAO,CACLC,SAAU,oGACVC,QAAS,CACPC,MAAO,aACPC,QAAS,gGAGbC,OAAQC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAChBX,EAAAA,EAAAA,KAAA,YACMY,EACJC,KAAK,QACLC,YAAY,sEACZC,OAAQA,IAAMzB,EAAc,SAC5B,eAAcF,EAAO4B,MAAQ,OAAS,SACtC,IAGL5B,EAAO4B,QAAShB,EAAAA,EAAAA,KAAA,QAAMiB,KAAK,QAAOlB,SAAEX,EAAO4B,MAAMP,cAGpDhB,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOC,QAAQ,WAAUF,SAAC,2CAC1BC,EAAAA,EAAAA,KAACE,EAAAA,GAAU,CACTC,KAAK,WACLlB,QAASA,EACTmB,aAAa,GACbC,MAAO,CACLC,SAAU,oGACVY,UAAW,CACTV,MAAO,EACPC,QAAS,oOAGbC,OAAQS,IAAA,IAAC,MAAEP,GAAOO,EAAA,OAChBnB,EAAAA,EAAAA,KAAA,YACMY,EACJC,KAAK,WACLC,YAAY,qGACZC,OAAQA,IAAMzB,EAAc,YAC5B,eAAcF,EAAOgC,SAAW,OAAS,SACzC,IAGLhC,EAAOgC,WAAYpB,EAAAA,EAAAA,KAAA,QAAMiB,KAAK,QAAOlB,SAAEX,EAAOgC,SAASX,cAG1DT,EAAAA,EAAAA,KAAA,UAAQa,KAAK,SAASQ,SAA4B,eAAlBvC,EAA+BiB,SAC5DnB,GAA0B,2DAGV,aAAlBE,IACCkB,EAAAA,EAAAA,KAAA,KAAGH,UAAWC,EAAkBC,SAAC,gDAElChB,IAASU,EAAAA,EAAAA,MAAA,KAAGI,UAAWC,EAAgBC,SAAA,CAAC,yCAAShB,OAC7C,C,yHCpGX,QAAkC,mC,aCiBlC,MAkCA,EAlCkBuC,KAChB,MAAMC,GAAWC,EAAAA,EAAAA,KACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAqBC,EAAAA,EAAAA,IAAeC,EAAAA,IACpCC,GAAwBF,EAAAA,EAAAA,IAAeG,EAAAA,IACvCC,GAAOJ,EAAAA,EAAAA,IAAeK,EAAAA,IAS5B,OACEjC,EAAAA,EAAAA,KAACkC,EAAAA,EAAS,CAACrC,UAAWC,EAAkBC,SACpCiC,GASAvC,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,oHACHC,EAAAA,EAAAA,KAACmC,EAAAA,EAAM,CAACC,QAAQ,iCAAQC,YAAaA,KAf3Cd,GAASe,EAAAA,EAAAA,MAeuD,QAV5DtC,EAAAA,EAAAA,KAACvB,EAAAA,EAAQ,CACPE,MAAM,2BACNC,WAAW,iCACXC,gBAbac,IACnB4B,GAASgB,EAAAA,EAAAA,IAAM,CAAE5C,OAAM8B,aAAY,EAa7B3C,cAAe6C,EACf5C,MAAO+C,KAQD,C","sources":["webpack://aston-react/./src/components/userForm/UserForm.module.css?2194","components/userForm/UserForm.tsx","webpack://aston-react/./src/pages/LoginPage/LoginPage.module.css?f8e0","pages/LoginPage/LoginPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"userForm\":\"UserForm_userForm__bcMib\",\"userFormSuccess\":\"UserForm_userFormSuccess__YNNrT\",\"userFormError\":\"UserForm_userFormError__1g9eX\"};","import { useForm, SubmitHandler, Controller } from \"react-hook-form\"\r\n\r\nimport { SerializedError } from \"@reduxjs/toolkit\"\r\n\r\nimport { UserFormInputs } from \"../../types/User\"\r\n\r\nimport s from \"./UserForm.module.css\"\r\n\r\ninterface Props {\r\n  title: string\r\n  submitText?: string\r\n  onSubmitHandler: (data: UserFormInputs) => void\r\n  requestStatus?: null | \"complete\" | \"processing\" | SerializedError | string\r\n  error?: string | null\r\n}\r\n\r\nexport const UserForm = ({\r\n  title,\r\n  submitText,\r\n  onSubmitHandler,\r\n  requestStatus,\r\n  error,\r\n}: Props) => {\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    trigger,\r\n    formState: { errors },\r\n  } = useForm<UserFormInputs>()\r\n\r\n  const validateField = async (fieldName: keyof UserFormInputs) => {\r\n    await trigger(fieldName)\r\n  }\r\n\r\n  const onSubmit: SubmitHandler<UserFormInputs> = (data) => {\r\n    onSubmitHandler(data)\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)} noValidate className={s.userForm}>\r\n      <h1>{title}</h1>\r\n      <div>\r\n        <label htmlFor=\"email\">Email:</label>\r\n        <Controller\r\n          name=\"email\"\r\n          control={control}\r\n          defaultValue=\"\"\r\n          rules={{\r\n            required: \"Обязательное поле\",\r\n            pattern: {\r\n              value: /^\\S+@\\S+$/i,\r\n              message: \"Неверный формат email\",\r\n            },\r\n          }}\r\n          render={({ field }) => (\r\n            <input\r\n              {...field}\r\n              type=\"email\"\r\n              placeholder=\"Введите ваш email\"\r\n              onBlur={() => validateField(\"email\")}\r\n              aria-invalid={errors.email ? \"true\" : \"false\"}\r\n            />\r\n          )}\r\n        />\r\n        {errors.email && <span role=\"alert\">{errors.email.message}</span>}\r\n      </div>\r\n\r\n      <div>\r\n        <label htmlFor=\"password\">Пароль:</label>\r\n        <Controller\r\n          name=\"password\"\r\n          control={control}\r\n          defaultValue=\"\"\r\n          rules={{\r\n            required: \"Обязательное поле\",\r\n            minLength: {\r\n              value: 3,\r\n              message: \"Пароль должен содержать не менее 3 символов\",\r\n            },\r\n          }}\r\n          render={({ field }) => (\r\n            <input\r\n              {...field}\r\n              type=\"password\"\r\n              placeholder=\"Введите ваш пароль\"\r\n              onBlur={() => validateField(\"password\")}\r\n              aria-invalid={errors.password ? \"true\" : \"false\"}\r\n            />\r\n          )}\r\n        />\r\n        {errors.password && <span role=\"alert\">{errors.password.message}</span>}\r\n      </div>\r\n\r\n      <button type=\"submit\" disabled={requestStatus === \"processing\"}>\r\n        {submitText ? submitText : \"Отправить\"}\r\n      </button>\r\n\r\n      {requestStatus === \"complete\" && (\r\n        <p className={s.userFormSuccess}>Успешно!</p>\r\n      )}\r\n      {error && <p className={s.userFormError}>Ошибка: {error}</p>}\r\n    </form>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"userFormWrapper\":\"LoginPage_userFormWrapper__kGRr7\"};","import { useNavigate } from \"react-router-dom\"\r\n\r\nimport { Container } from \"../../components/layout/container/Container\"\r\nimport { UserForm } from \"../../components/userForm/UserForm\"\r\nimport { useAppDispatch } from \"../../hooks/useAppDispatch\"\r\nimport { Login, removeUser } from \"../../store/authSlice\"\r\nimport { UserFormInputs } from \"../../types/User\"\r\nimport {\r\n  useAppSelector,\r\n  loginizationErrorSelector,\r\n  loginizationStatusSelector,\r\n  userSelector,\r\n} from \"../../hooks/useAppSelector\"\r\n\r\nimport { Button } from \"../../components/button/Button\"\r\n\r\nimport s from \"./LoginPage.module.css\"\r\n\r\nconst LoginPage = () => {\r\n  const dispatch = useAppDispatch()\r\n  const navigate = useNavigate()\r\n  const loginizationStatus = useAppSelector(loginizationStatusSelector)\r\n  const loginizationErrorText = useAppSelector(loginizationErrorSelector)\r\n  const user = useAppSelector(userSelector)\r\n\r\n  const handleLogin = (data: UserFormInputs) => {\r\n    dispatch(Login({ data, navigate }))\r\n  }\r\n\r\n  const handleLogOut = () => {\r\n    dispatch(removeUser())\r\n  }\r\n  return (\r\n    <Container className={s.userFormWrapper}>\r\n      {!user ? (\r\n        <UserForm\r\n          title=\"Вход\"\r\n          submitText=\"Войти\"\r\n          onSubmitHandler={handleLogin}\r\n          requestStatus={loginizationStatus}\r\n          error={loginizationErrorText}\r\n        />\r\n      ) : (\r\n        <div>\r\n          <p>Вы уже авторизованны</p>\r\n          <Button btnText=\"Выйти\" handleClick={() => handleLogOut()} />\r\n        </div>\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default LoginPage\r\n"],"names":["UserForm","_ref","title","submitText","onSubmitHandler","requestStatus","error","handleSubmit","control","trigger","formState","errors","useForm","validateField","async","fieldName","_jsxs","onSubmit","data","noValidate","className","s","children","_jsx","htmlFor","Controller","name","defaultValue","rules","required","pattern","value","message","render","_ref2","field","type","placeholder","onBlur","email","role","minLength","_ref3","password","disabled","LoginPage","dispatch","useAppDispatch","navigate","useNavigate","loginizationStatus","useAppSelector","loginizationStatusSelector","loginizationErrorText","loginizationErrorSelector","user","userSelector","Container","Button","btnText","handleClick","removeUser","Login"],"sourceRoot":""}